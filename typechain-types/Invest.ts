/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface InvestInterface extends utils.Interface {
  functions: {
    "currentProfit()": FunctionFragment;
    "investMoney(address)": FunctionFragment;
    "investor(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "currentProfit"
      | "investMoney"
      | "investor"
      | "owner"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "currentProfit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "investMoney", values: [string]): string;
  encodeFunctionData(functionFragment: "investor", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "currentProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface Invest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InvestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    investMoney(
      referralAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean,
        boolean
      ] & {
        amount: BigNumber;
        profit: BigNumber;
        profitWitdrawn: BigNumber;
        startTime: BigNumber;
        referredBy: string;
        expTime: BigNumber;
        timeStarted: boolean;
        referral: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  currentProfit(overrides?: CallOverrides): Promise<BigNumber>;

  investMoney(
    referralAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investor(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      boolean,
      boolean
    ] & {
      amount: BigNumber;
      profit: BigNumber;
      profitWitdrawn: BigNumber;
      startTime: BigNumber;
      referredBy: string;
      expTime: BigNumber;
      timeStarted: boolean;
      referral: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    currentProfit(overrides?: CallOverrides): Promise<BigNumber>;

    investMoney(
      referralAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    investor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean,
        boolean
      ] & {
        amount: BigNumber;
        profit: BigNumber;
        profitWitdrawn: BigNumber;
        startTime: BigNumber;
        referredBy: string;
        expTime: BigNumber;
        timeStarted: boolean;
        referral: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    currentProfit(overrides?: CallOverrides): Promise<BigNumber>;

    investMoney(
      referralAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investMoney(
      referralAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
